#E-Commerce Review Service with Spring Boot, Wiremock, Debezium, Kafka, SQL DB, and Redis

## Project Overview

This project implements a **Review Service** as part of an e-commerce platform. The service allows users to submit, view, and delete reviews, with admins able to moderate them. The project integrates **Spring Boot**, **Debezium**, **Kafka**, **SQL Database**, and **Redis**, with **Wiremock** for simulating dependent services. The following sections outline the key steps involved in building the project.

## Steps

### Step 1: Setting up the Spring Boot Service
The core of this system is built using **Spring Boot**, which simplifies the creation of RESTful web services. In this step:
- We set up a basic Spring Boot application.
- Configured dependencies for **Spring Data JPA** (for database interactions) and **Spring Web** (for exposing REST APIs).
- The service includes endpoints for creating, reading, and deleting reviews, which can be moderated by admins.
- The embedded server allows the service to be run locally for easier development.

### Step 2: Integrating Kafka for Asynchronous Communication
**Apache Kafka** is used for asynchronous communication between the Review Service and a **Moderation Service**:
- **Kafka** serves as a message broker to ensure that user reviews are submitted to the Moderation Service for approval.
- This step involves configuring Kafka topics for publishing new reviews and consuming moderation results.
- The Review Service acts as a producer, publishing review events, while the Moderation Service acts as a consumer.

### Step 3: Implementing Debezium for Data Change Capture
To maintain data consistency across services, we integrate **Debezium**:
- **Debezium** captures row-level changes in the SQL database and streams them to Kafka topics.
- Changes made by the Moderation Service, such as approving or rejecting reviews, are automatically reflected in the Review Service’s database.
- This step involves setting up Debezium connectors for change data capture and ensuring data synchronization without direct service-to-service communication.

### Step 4: Setting Up SQL Database for Persistent Data Storage
The **SQL Database** stores review and moderation data persistently:
- Reviews are stored with fields like `review_id`, `product_id`, `user_id`, `rating`, and `content`.
- **Spring Data JPA** simplifies the interaction with the database by abstracting CRUD operations.
- Database migrations are managed using tools like **Flyway** or **Liquibase** to handle schema changes.

### Step 5: Introducing Redis for Caching
**Redis** is introduced as a caching layer to reduce latency and improve performance:
- Redis stores frequently accessed data (such as recent reviews) in memory.
- The Review Service first checks Redis before querying the SQL database, improving response times.
- Redis helps to manage temporary data such as in-progress moderation results or cached review information.

### Step 6: Local Testing and Service Simulation with Wiremock
For local testing, **Wiremock** is used to mock the Moderation Service:
- Wiremock allows the Review Service to be tested independently of the Moderation Service by simulating its responses.
- Mock endpoints return predefined responses, enabling local development and testing without full service integration.
- This step allows the testing of different scenarios, such as varying response times or network failures.

## Conclusion
This project combines several technologies—**Spring Boot**, **Kafka**, **Debezium**, **SQL**, and **Redis**—to create a scalable and resilient Review Service. It leverages **Wiremock** for local testing, allowing the service to be developed and tested in isolation. Future improvements could include adding security, optimizing caching, and scaling the Kafka infrastructure.

